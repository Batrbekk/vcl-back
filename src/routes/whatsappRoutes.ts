import { Router } from 'express';
import { authMiddleware } from '../middleware/authMiddleware';
import { tenantMiddleware } from '../middleware/tenantMiddleware';
import {
  createWhatsAppSession,
  cleanupWhatsAppSessions,
  getQRCode,
  getCompanySessions,
  grantManagerAccess,
  getManagerAccess,
  revokeManagerAccess,
  getChats,
  getChatMessages,
  sendMessage,
  markChatAsRead,
  disconnectSession,
  getWhatsAppStats
} from '../controllers/whatsappController';

const router = Router();

/**
 * @swagger
 * /api/whatsapp/websocket/test-config:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WebSocket (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 *     tags: [WhatsApp]
 *     responses:
 *       200:
 *         description: –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket
 */
router.get('/websocket/test-config', (req, res) => {
  const serverUrl = process.env.NODE_ENV === 'production' 
    ? 'https://vcl-back.vercel.app' 
    : `http://localhost:${process.env.PORT || 3000}`;
    
  res.json({
    message: 'üîß –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket –¥–ª—è WhatsApp',
    server_info: {
      url: serverUrl,
      port: process.env.PORT || 3000,
      environment: process.env.NODE_ENV || 'development'
    },
    correct_frontend_config: {
      websocket_url: `${serverUrl}/whatsapp`,
      options: {
        transports: ['websocket', 'polling'],
        timeout: 20000,
        auth: {
          token: 'YOUR_JWT_TOKEN_HERE'
        }
      }
    },
    wrong_config_example: {
      url: 'ws://localhost:3001/socket.io/', // ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
      note: '–≠—Ç–æ—Ç URL –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç namespace'
    },
    troubleshooting: {
      common_issues: [
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3000, –Ω–µ 3001)',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç namespace /whatsapp',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤ auth.token',
        '–ü—Ä–æ–±–ª–µ–º—ã —Å CORS'
      ],
      test_command: `curl ${serverUrl}/`,
      test_websocket: `const socket = io('${serverUrl}/whatsapp', { auth: { token: 'YOUR_TOKEN' } });`
    }
  });
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã—à–µ)
router.use(authMiddleware);
router.use(tenantMiddleware);

/**
 * @swagger
 * tags:
 *   name: WhatsApp
 *   description: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */

/**
 * @swagger
 * /api/whatsapp/sessions:
 *   post:
 *     summary: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π WhatsApp —Å–µ—Å—Å–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     sessionId:
 *                       type: string
 *                     message:
 *                       type: string
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.post('/sessions', createWhatsAppSession);

/**
 * @swagger
 * /api/whatsapp/sessions/cleanup:
 *   post:
 *     summary: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö WhatsApp —Å–µ—Å—Å–∏–π
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.post('/sessions/cleanup', cleanupWhatsAppSessions);

/**
 * @swagger
 * /api/whatsapp/sessions:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ WhatsApp —Å–µ—Å—Å–∏–π –∫–æ–º–ø–∞–Ω–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 */
router.get('/sessions', getCompanySessions);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/qr:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *     responses:
 *       200:
 *         description: QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     isConnected:
 *                       type: boolean
 *                     qrCode:
 *                       type: string
 *                       description: Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–∞
 *                     phoneNumber:
 *                       type: string
 *                     displayName:
 *                       type: string
 *                     message:
 *                       type: string
 *       404:
 *         description: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.get('/sessions/:sessionId/qr', getQRCode);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/disconnect:
 *   post:
 *     summary: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WhatsApp —Å–µ—Å—Å–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *     responses:
 *       200:
 *         description: –°–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *       404:
 *         description: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.post('/sessions/:sessionId/disconnect', disconnectSession);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/access:
 *   post:
 *     summary: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫ WhatsApp —Å–µ—Å—Å–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - managerId
 *             properties:
 *               managerId:
 *                 type: string
 *                 description: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 *               canRead:
 *                 type: boolean
 *                 default: true
 *                 description: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
 *               canWrite:
 *                 type: boolean
 *                 default: true
 *                 description: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
 *               canManageChats:
 *                 type: boolean
 *                 default: false
 *                 description: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
 *     responses:
 *       200:
 *         description: –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *       404:
 *         description: –°–µ—Å—Å–∏—è –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
 */
router.post('/sessions/:sessionId/access', grantManagerAccess);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/access:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ WhatsApp —Å–µ—Å—Å–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                       sessionId:
 *                         type: string
 *                       managerId:
 *                         type: string
 *                       canRead:
 *                         type: boolean
 *                       canWrite:
 *                         type: boolean
 *                       canManageChats:
 *                         type: boolean
 *                       grantedAt:
 *                         type: string
 *                         format: date-time
 *                       manager:
 *                         type: object
 *                         properties:
 *                           id:
 *                             type: string
 *                           firstName:
 *                             type: string
 *                           lastName:
 *                             type: string
 *                           email:
 *                             type: string
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *       404:
 *         description: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.get('/sessions/:sessionId/access', getManagerAccess);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/access/{managerId}:
 *   delete:
 *     summary: –û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ WhatsApp —Å–µ—Å—Å–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *       - in: path
 *         name: managerId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 *     responses:
 *       200:
 *         description: –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 */
router.delete('/sessions/:sessionId/access/:managerId', revokeManagerAccess);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/chats:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ WhatsApp
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 50
 *         description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *       - in: query
 *         name: includeGroups
 *         schema:
 *           type: string
 *           enum: ['true', 'false']
 *           default: 'false'
 *         description: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
 *       - in: query
 *         name: includeStatus
 *         schema:
 *           type: string
 *           enum: ['true', 'false']
 *           default: 'false'
 *         description: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å—ã WhatsApp
 *       - in: query
 *         name: chatType
 *         schema:
 *           type: string
 *           enum: ['individual', 'group', 'all']
 *           default: 'individual'
 *         description: –¢–∏–ø —á–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     chats:
 *                       type: array
 *                       items:
 *                         type: object
 *                     pagination:
 *                       type: object
 *       403:
 *         description: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
 *       404:
 *         description: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.get('/sessions/:sessionId/chats', getChats);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/chats/{chatId}/messages:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *       - in: path
 *         name: chatId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —á–∞—Ç–∞
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 50
 *         description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *     responses:
 *       200:
 *         description: –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
 *       403:
 *         description: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
 *       404:
 *         description: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
router.get('/sessions/:sessionId/chats/:chatId/messages', getChatMessages);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/chats/{chatId}/send:
 *   post:
 *     summary: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp —á–∞—Ç
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *       - in: path
 *         name: chatId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —á–∞—Ç–∞
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - message
 *             properties:
 *               message:
 *                 type: string
 *                 description: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 *     responses:
 *       200:
 *         description: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 *       400:
 *         description: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 *       403:
 *         description: –ù–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
 *       404:
 *         description: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
router.post('/sessions/:sessionId/chats/:chatId/send', sendMessage);

/**
 * @swagger
 * /api/whatsapp/sessions/{sessionId}/chats/{chatId}/read:
 *   post:
 *     summary: –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —Å–µ—Å—Å–∏–∏ WhatsApp
 *       - in: path
 *         name: chatId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID —á–∞—Ç–∞
 *     responses:
 *       200:
 *         description: –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     markedCount:
 *                       type: integer
 *                       description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 *                     chat:
 *                       type: object
 *                       description: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
 *       403:
 *         description: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
 *       404:
 *         description: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
router.post('/sessions/:sessionId/chats/:chatId/read', markChatAsRead);

/**
 * @swagger
 * /api/whatsapp/stats:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WhatsApp –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     sessions:
 *                       type: object
 *                       properties:
 *                         total:
 *                           type: integer
 *                         connected:
 *                           type: integer
 *                         disconnected:
 *                           type: integer
 *                     chats:
 *                       type: object
 *                       properties:
 *                         total:
 *                           type: integer
 *                     messages:
 *                       type: object
 *                       properties:
 *                         total:
 *                           type: integer
 *                         last30Days:
 *                           type: object
 *                           properties:
 *                             total:
 *                               type: integer
 *                             incoming:
 *                               type: integer
 *                             outgoing:
 *                               type: integer
 */
router.get('/stats', getWhatsAppStats);

/**
 * @swagger
 * /api/whatsapp/websocket/config:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WebSocket –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp WebSocket
 *     tags: [WhatsApp]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 websocket_url:
 *                   type: string
 *                   example: "http://localhost:3000/socket.io/"
 *                 namespace:
 *                   type: string  
 *                   example: "/whatsapp"
 *                 full_url:
 *                   type: string
 *                   example: "http://localhost:3000/whatsapp"
 *                 options:
 *                   type: object
 *                   properties:
 *                     transports:
 *                       type: array
 *                       items:
 *                         type: string
 *                       example: ["websocket", "polling"]
 *                     timeout:
 *                       type: number
 *                       example: 20000
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 */
router.get('/websocket/config', authMiddleware, (req, res) => {
  const serverUrl = process.env.NODE_ENV === 'production' 
    ? 'https://vcl-back.vercel.app' 
    : `http://localhost:${process.env.PORT || 3000}`;
    
  res.json({
    message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket –¥–ª—è WhatsApp',
    websocket_url: `${serverUrl}/socket.io/`,
    namespace: '/whatsapp',
    full_url: `${serverUrl}/whatsapp`,
    options: {
      transports: ['websocket', 'polling'],
      timeout: 20000,
      path: '/socket.io/',
      auth: {
        token: 'YOUR_JWT_TOKEN_HERE'
      }
    },
    example_frontend_code: {
      connection: `import io from 'socket.io-client';\n\nconst socket = io('${serverUrl}/whatsapp', {\n  transports: ['websocket', 'polling'],\n  timeout: 20000,\n  auth: {\n    token: 'YOUR_JWT_TOKEN'\n  }\n});`,
      handlers: `socket.on('connect', () => {\n  console.log('Connected to WhatsApp WebSocket');\n});\n\nsocket.on('connection-confirmed', (data) => {\n  console.log('Connection confirmed:', data);\n});`
    }
  });
});

export default router; 